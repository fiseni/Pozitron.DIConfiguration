trigger:
  branches:
      include:
      - master
      - refs/tags/*
pr:
- master

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/*.sln'

steps:

# Prepare
- task: DotNetCoreCLI@2
  displayName: 'dotnet info'
  inputs:
    command: custom
    custom: '--info'

- task: DotNetCoreCLI@2
  displayName: 'dotnet version'
  inputs:
    command: custom
    custom: '--version'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.3'
  inputs:
    versionSpec: 4.9.3

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    
# Build    
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    arguments: '--output $(Build.ArtifactStagingDirectory)'

# # run tests and create coverage report
# - task: dotnetcorecli@2
  # displayname: test
  # inputs:
    # command: test
    # arguments: '--configuration $(buildconfiguration) /p:collectcoverage=true /p:coverletoutputformat=cobertura'
    # projects: 'tests/**/*.csproj'
    # nobuild: true

# - task: palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  # displayname: reportgenerator
  # inputs:
    # reports: '$(build.sourcesdirectory)/tests/**/coverage.cobertura.xml'
    # targetdir: '$(build.sourcesdirectory)/codecoverage'
    # reporttypes: 'htmlinline_azurepipelines;cobertura;badges'
    # assemblyfilters: '-xunit*'

# - task: publishcodecoverageresults@1
  # displayname: 'publish code coverage'
  # inputs:
    # codecoveragetool: cobertura
    # summaryfilelocation: '$(build.sourcesdirectory)/codecoverage/cobertura.xml'
   # # reportdirectory: '$(build.sourcesdirectory)/codecoverage'

- task: CopyFiles@2
  displayName: 'Copy *.nupkg Files'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**\*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Package'
    flattenFolders: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# Publish
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Package'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))